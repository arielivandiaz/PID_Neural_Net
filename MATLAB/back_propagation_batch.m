function [n_ow, dow, n_hw] = back_propagation_batch(r, y, w_size, ow, hw, v, x_p, u_p, i_p, r_tol, ts)  % Initialization of weights  n_ow = ow;  n_hw = hw;    dow = zeros(1, 3);  dhw = zeros(2,3);  % Tolerance  tol = 1e-20;%  max_change = 0.01*log(w_size+1);  max_change = 0.01*log(w_size+1);  % Error difference    % Learning Rate  m = 1e-2*ts;%  m = 1e-3*ts;  % Tolerance for change in weights  d_tol = max_change/m;    % Output Layer Back Propagation  for n = 1:3    for i = 1:w_size      % Change in NN Output      dv = v(i+1) - v(i);      if abs(dv) < tol      % sign(dv) can still yield 0, in which case assume a positive dv        if dv == 0          dv = tol;        else          dv = sign(dv)*tol;        endif      endif            dr = r(i+1) - y(i+1);      if dr < r_tol        dr = 0;      endif      i = i      dv = dv      dr = dr      dy = y(i+1) - y(i)      display(' ')            dow(n) += -2*dr*(dy/dv)*x_p(i+1,n);      i = i;      dow(2) = dow(2);     endfor    # Ensuring no unstability due to quick learning    if abs(dow(n)) > d_tol      dow(n) = sign(dow(n))*d_tol;    endif%    dow(n) = dow(n)    n_ow(n) = ow(n) - m*dow(n)/w_size;    if n_ow(n) > 1      n_ow(n) = 1;    elseif n_ow(n) < 0      n_ow(n) = 0;    endif  endfor    % Hidden Layer Back Propagation%  for j = 1:2%    for k = 1:3%      for i = 1:w_size%        %        % Change in NN Output%        dv = v(i+1) - v(i);%        if abs(dv) < tol%        % sign(dv) can still yield 0, in which case assume a positive dv%          if dv == 0%            dv = tol;%          else%            dv = sign(dv)*tol;%          endif%        endif%        %        dr = r(i+1) - y(i+1);%        if dr < r_tol%          dr = 0;%        endif%        %        dy = y(i+1) - y(i);%        %        du = u_p(i+1,k) - u_p(i,k);%        dx = x_p(i+1,k) - x_p(i,k);%        %        % Ensuring no division by zero%        if abs(du) < tol%          if du == 0%            du = tol;%          else%            du = sign(du)*tol;%          endif%        endif %        %        dhw(j,k) += -2*dr*dy*dx*ow(k)*i_p(i+1,j)/(dv*du);%      endfor%      %      % Ensuring no unstabilitity due to quick learning%      if abs(dhw(j,k)) > d_tol%        dhw(j,k) = sign(dhw(j,k))*d_tol;%      endif%      %      %      n_hw(j,k) = hw(j,k) - m*dhw(j,k)/w_size;%      if abs(n_hw(j,k)) > 1%         n_hw(j,k) = sign(n_hw(j,k));%      endif%    endfor%  endfor  n_ow = n_owendfunction